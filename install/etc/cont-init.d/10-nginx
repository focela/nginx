#!/command/with-contenv bash

# Source common container functions
source /assets/functions/00-container

# Prepare service with a single process name
prepare_service single
PROCESS_NAME="nginx"

# Disable Nginx if the ENABLE_NGINX variable is set to false
if var_false "${ENABLE_NGINX}" ; then
    # Notify the user that Nginx is being disabled
    print_notice "Disabling Nginx Functionality"
    # Stop related services and clean up associated files
    service_stop 10-nginx
    service_stop 11-nginx-config-reload
    rm -rf /assets/logrotate/nginx*
    rm -rf /etc/logrotate.d/nginx*
    rm -rf /assets/logrotate/nginx*
    rm -rf /etc/zabbix/*/nginx*
    rm -rf /etc/fluent-bit/conf.d/nginx*
    liftoff
    exit 0
fi

# Perform initialization tasks only if the container is not restarting
if [ ! -f "/tmp/.container/container-restart" ] ; then

    ### Initial Nginx configuration checks
    # Check for legacy configurations and migrate if necessary
    nginx_check_legacy_configuration

    ### Configure server-wide settings
    # Set Nginx operation mode (e.g., normal, proxy, maintenance)
    nginx_configure_mode
    # Configure global server settings (e.g., buffer sizes, timeout settings)
    nginx_configure_server

    ### Configure security and logging
    # Set up authentication (e.g., Basic, LDAP) for server
    nginx_configure_authentication

    # Configure bot blocking if enabled
    if var_true "${NGINX_ENABLE_BLOCK_BOTS}" ; then
        # Remove conflicting server_names directive and enable bot blocker
        sed -i "/server_names_hash_bucket_size/d" /etc/nginx/nginx.conf
        nginx_configure_blockbots
    else
        # Remove bot blocker configuration if disabled
        sed -i "\|include /etc/nginx/snippets/bot_blocker.conf;|d" /etc/nginx/nginx.conf
    fi

    # Set up logging (e.g., access, error, blocked request logs)
    nginx_configure_logging

    ### Configure maintenance mode
    nginx_configure_maintenance

    ### Configure application and site settings
    if var_true "${NGINX_ENABLE_APPLICATION_CONFIGURATION}"; then
        # Temporarily update webroot if suffix is specified
        if [ -n "${NGINX_WEBROOT_SUFFIX}" ]; then
            _nginx_webroot_original="${NGINX_WEBROOT}"
            NGINX_WEBROOT=${NGINX_WEBROOT}${NGINX_WEBROOT_SUFFIX}
        fi

        # Configure default site settings
        nginx_configure_site_default

        # Update templates with environment variables
        update_template "/etc/nginx/sites.available/*.conf" \
                        NGINX_LISTEN_PORT \
                        NGINX_WEBROOT

        # Restore original webroot if it was temporarily updated
        if [ -n "${NGINX_WEBROOT_SUFFIX}" ]; then
            NGINX_WEBROOT=${_nginx_webroot_original}
        fi

        # Create a sample HTML file if enabled
        if var_true "${NGINX_ENABLE_CREATE_SAMPLE_HTML}" ; then
            nginx_create_sample_html
        fi

        # Handle legacy template placeholders and replace them
        if silent grep -q '<WEBROOT>' /etc/nginx/sites.available/*.conf ; then
            print_notice "Detected Legacy templates in /etc/nginx/sites.available. Please change '<WEBROOT>' to {{NGINX_WEBROOT}}"
            silent sed -i "s|<WEBROOT>|${NGINX_WEBROOT}|g" /etc/nginx/sites.available/*.conf
        fi
        if silent grep -q '<LISTEN_PORT>' /etc/nginx/sites.available/*.conf 2>&1 ; then
            print_notice "Detected Legacy templates in /etc/nginx/sites.available. Please change '<LISTEN_PORT>' to {{NGINX_LISTEN_PORT}}"
            silent sed -i "s|<LISTEN_PORT>|${NGINX_LISTEN_PORT}|g" /etc/nginx/sites.available/*.conf
        fi

        # Enable and configure specified sites
        if [ -n "${NGINX_SITE_ENABLED}" ] ; then
            if [ "${NGINX_SITE_ENABLED,,}" != "null" ] ; then
                sites=$(echo "${NGINX_SITE_ENABLED}" | tr "," "\n")
                for site in $sites; do
                    # Configure site-specific authentication
                    nginx_configure_site_authentication "${site}"
                    # Configure bot blocking for the site if enabled
                    if var_true "${NGINX_ENABLE_BLOCK_BOTS}" ; then
                        nginx_configure_site_blockbots "${site}"
                    fi
                    # Include custom configurations for the site
                    if [ -n "${NGINX_INCLUDE_CONFIGURATION}" ] ; then
                        nginx_configure_site_includes "${site}"
                    fi
                done
            fi
        fi
    else
        # Notify user if website configuration files are not being configured
        print_notice "Not configuring Website configuration files"
    fi

    ### Post-initialization tasks
    # Handle site enabling, permissions, and other final setup steps
    nginx_post_init
fi

# Start the service and release control
liftoff
